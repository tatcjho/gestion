(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('date-fns'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@ngx-tiny/date-picker', ['exports', '@angular/core', '@angular/forms', 'date-fns', '@angular/common'], factory) :
    (global = global || self, factory((global['ngx-tiny'] = global['ngx-tiny'] || {}, global['ngx-tiny']['date-picker'] = {}), global.ng.core, global.ng.forms, global.DateFns, global.ng.common));
}(this, (function (exports, core, forms, dateFns, common) { 'use strict';

    var isSameDate = function (date, current) { return (dateFns.isSameDay(date, current) && dateFns.isSameMonth(date, current) && dateFns.isSameYear(date, current)); };

    var createDateRange = function (start, end) { return ({
        start: start ? new Date(start.getTime()) : null,
        end: end ? new Date(end.getTime()) : null,
    }); };

    /**
     * Internal library helper that helps to check if value is empty
     */
    var isNull = function (value) {
        return (typeof value === 'undefined') || (value === null);
    };

    // instanceID for calculating the auto-incrementing field ID
    var instanceID = 0;
    var NgxDatePickerComponent = /** @class */ (function () {
        function NgxDatePickerComponent() {
            var _this = this;
            /**
             * Set date picker's visibility state
             */
            this.isOpened = true;
            this.valueChange = new core.EventEmitter();
            this.currentOptions = {
                closeOnClickOutside: false,
                closeOnSelection: true,
                includeDays: 'all',
                includeNextMonthsFirstFullWeek: false,
                minYear: 1900,
                maxYear: 2050,
                displayFormat: 'MMM d, yyyy',
                barTitleFormat: 'MMM yyyy',
                dayNamesFormat: 'EEEEEE',
                rangeSeparator: '-',
                selectRange: false,
                firstCalendarDay: 0,
                barTitleIfEmpty: 'Click to select a date',
                locale: {},
                fieldId: this.defaultFieldId,
                useEmptyBarTitle: true,
                mobileStyle: 'dialog'
            };
            this.onTouchedCallback = function () { };
            this.onChangeCallback = function (_) {
                _this.valueChange.emit(_);
            };
            this.formatDay = function (date, isVisible) {
                if (isVisible === void 0) { isVisible = true; }
                return ({
                    date: date,
                    day: dateFns.getDate(date),
                    month: dateFns.getMonth(date),
                    year: dateFns.getYear(date),
                    inThisMonth: dateFns.isSameMonth(date, _this.viewingDate),
                    isToday: isVisible && dateFns.isToday(date),
                    isSelected: isVisible && _this.isDateSelected(date),
                    isInRange: isVisible && _this.isInRange(date),
                    isSelectable: isVisible && _this.isDateSelectable(date),
                    isStart: isVisible && _this.isRangeBoundary(date, 'start'),
                    isEnd: isVisible && _this.isRangeBoundary(date, 'end'),
                    isVisible: isVisible,
                });
            };
        }
        NgxDatePickerComponent.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
        };
        Object.defineProperty(NgxDatePickerComponent.prototype, "range", {
            get: function () {
                return this._range;
            },
            set: function (val) {
                this._range = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NgxDatePickerComponent.prototype, "wrapperStyle", {
            get: function () {
                switch (this.currentOptions.mobileStyle) {
                    case 'dialog':
                        return this.isInline === false ? 'form-date' : 'inline-date';
                    case 'normal':
                    default:
                        return '';
                }
            },
            enumerable: false,
            configurable: true
        });
        NgxDatePickerComponent.prototype.ngOnInit = function () {
            if (typeof dateFns.startOfMonth === 'undefined') {
                throw new Error('module date-fns is required by <ngx-date-picker> to function.');
            }
            this.view = 'days';
            this.range = this.range || {
                start: new Date(),
                end: new Date(),
            };
            if (this.value && !(this.value instanceof Date)) {
                this.range = this.value;
                this.viewingDate = this.range.start;
            }
            else if (this.value && this.value instanceof Date) {
                this.viewingDate = this.value;
            }
            else {
                this.viewingDate = this.range.start;
            }
            this.updateOptions(this.options);
            this.initDayNames();
            this.initYears();
            this.initMonths();
            this.init();
        };
        NgxDatePickerComponent.prototype.ngOnChanges = function (changes) {
            if ('options' in changes) {
                this.updateOptions(changes.options.currentValue);
                this.initDayNames();
                this.init();
                this.initYears();
                this.initMonths();
            }
        };
        Object.defineProperty(NgxDatePickerComponent.prototype, "defaultFieldId", {
            get: function () {
                // Only evaluate and increment if required
                var value = "ngx-date-picker-" + instanceID++;
                Object.defineProperty(this, 'defaultFieldId', { value: value });
                return value;
            },
            enumerable: false,
            configurable: true
        });
        NgxDatePickerComponent.prototype.updateOptions = function (options) {
            this.currentOptions = Object.assign(Object.assign({}, this.currentOptions), options);
        };
        NgxDatePickerComponent.prototype.writeValue = function (val) {
            if (val) {
                if (typeof val === 'string') {
                    this.range.start = this.range.end = new Date(val);
                }
                else if (val instanceof Date) {
                    this.range.start = this.range.end = val;
                }
                else if (val.start) { // Checking if it's instance of DateRange
                    this.range = val;
                }
                else {
                    throw Error('Invalid input data type');
                }
                this.viewingDate = this.range.start || this.viewingDate || new Date();
                this.init();
            }
        };
        NgxDatePickerComponent.prototype.registerOnChange = function (fn) {
            this.onChangeCallback = fn;
        };
        NgxDatePickerComponent.prototype.registerOnTouched = function (fn) {
            this.onTouchedCallback = fn;
        };
        NgxDatePickerComponent.prototype.getDayClasses = function (day) {
            return {
                'is-prev-month': !day.inThisMonth,
                'is-today': day.isToday,
                'is-selected': day.isSelected,
                'is-in-range': day.isInRange,
                'is-disabled': !day.isSelectable,
                'range-start': day.isStart,
                'range-end': day.isEnd,
                'is-visible': day.isVisible,
            };
        };
        /**
         * Checks if specified date is in range of min and max dates
         */
        NgxDatePickerComponent.prototype.isDateSelectable = function (date) {
            var minDateSet = !isNull(this.currentOptions.minDate);
            var maxDateSet = !isNull(this.currentOptions.maxDate);
            var timestamp = date.valueOf();
            // Check if the date range is set and between min and max
            var _isAboveMinDate = minDateSet ? timestamp >= this.currentOptions.minDate.valueOf() : true;
            var _isBelowMaxDate = maxDateSet ? timestamp <= this.currentOptions.maxDate.valueOf() : true;
            return _isAboveMinDate && _isBelowMaxDate;
        };
        NgxDatePickerComponent.prototype.isDateSelected = function (date) {
            return this.range && this.range.start ? isSameDate(date, this.range.start) || isSameDate(date, this.range.end) : false;
        };
        NgxDatePickerComponent.prototype.isInRange = function (date) {
            return this.isDateSelected(date) || this.range && this.range.start ? (dateFns.isAfter(date, this.range.start) && dateFns.isBefore(date, this.range.end)) : false;
        };
        NgxDatePickerComponent.prototype.formatDisplay = function () {
            if (!this.range) {
                return '';
            }
            var formattedStartDate = dateFns.format(this.range.start, this.currentOptions.displayFormat, this.currentOptions.locale);
            if (this.currentOptions.selectRange) {
                var formattedEndDate = dateFns.format(this.range.end || this.range.start, this.currentOptions.displayFormat, this.currentOptions.locale);
                return formattedStartDate + " " + this.currentOptions.rangeSeparator + " " + formattedEndDate;
            }
            return formattedStartDate;
        };
        NgxDatePickerComponent.prototype.isRangeBoundary = function (date, boundary) {
            return this.range ? !this.range[boundary] || isSameDate(date, this.range[boundary]) : false;
        };
        NgxDatePickerComponent.prototype.getValueToEmit = function (range) {
            if (!range || !range.start) {
                return null;
            }
            if (!this.currentOptions.selectRange) {
                return new Date(range.start.getTime());
            }
            if (range.end) {
                return createDateRange(range.start, range.end);
            }
            return createDateRange(range.start, range.start);
        };
        // ############### Day #################
        NgxDatePickerComponent.prototype.init = function () {
            var _this = this;
            if (!this.viewingDate) {
                return;
            }
            var start = dateFns.startOfMonth(this.viewingDate);
            var end = dateFns.endOfMonth(this.viewingDate);
            this.days = dateFns.eachDayOfInterval({ start: start, end: end }).map(function (date) { return _this.formatDay(date); });
            var firstMonthDay = dateFns.getDay(start) - this.currentOptions.firstCalendarDay;
            var prevDays = firstMonthDay < 0 ? 7 - this.currentOptions.firstCalendarDay : firstMonthDay;
            var nextDays = (this.currentOptions.firstCalendarDay === 1 ? 7 : 6) - dateFns.getDay(end);
            var showPrevMonthDays = this.currentOptions.includeDays === 'all' || this.currentOptions.includeDays === 'previous-month';
            var showNextMonthDays = this.currentOptions.includeDays === 'all' || this.currentOptions.includeDays === 'next-month';
            if (showNextMonthDays && this.currentOptions.includeNextMonthsFirstFullWeek) {
                nextDays += 7;
            }
            for (var i = 1; i <= prevDays; i++) {
                this.days.unshift(this.formatDay(dateFns.subDays(start, i), showPrevMonthDays));
            }
            new Array(nextDays).fill(undefined)
                .forEach(function (_, i) { return _this.days.push(_this.formatDay(dateFns.addDays(end, i + 1), showNextMonthDays)); });
            this.displayValue = this.formatDisplay();
            if (this.range) {
                this.barTitle = dateFns.format(this.viewingDate, this.currentOptions.barTitleFormat, this.currentOptions.locale);
            }
            else {
                this.barTitle = this.currentOptions.useEmptyBarTitle ?
                    this.currentOptions.barTitleIfEmpty :
                    dateFns.format(this.viewingDate, this.currentOptions.barTitleFormat, this.currentOptions.locale);
            }
        };
        NgxDatePickerComponent.prototype.setDate = function (i) {
            var date = this.days[i].date;
            var _range = this.range || {};
            if (this.currentOptions.selectRange) {
                if (!this.range || (!this.range.start && !this.range.end)) {
                    _range.start = date;
                }
                else if (this.range.start && !this.range.end && dateFns.isAfter(date, this.range.start)) {
                    _range.end = date;
                }
                else {
                    _range.end = undefined;
                    _range.start = date;
                }
            }
            else {
                _range.start = _range.end = date;
            }
            this.range = _range;
            this.init();
            this.onChangeCallback(this.getValueToEmit(this.range));
            // Close if last value is selected
            if (this.currentOptions.closeOnSelection && this.range.end) {
                this.close();
            }
        };
        NgxDatePickerComponent.prototype.initDayNames = function () {
            this.dayNames = [];
            var start = this.currentOptions.firstCalendarDay;
            for (var i = start; i <= 6 + start; i++) {
                var date = dateFns.setDay(new Date(), i);
                this.dayNames.push(dateFns.format(date, this.currentOptions.dayNamesFormat, this.currentOptions.locale));
            }
        };
        // ############### Month ###############
        NgxDatePickerComponent.prototype.setMonth = function (i) {
            this.viewingDate = dateFns.setMonth(this.viewingDate, this.months[i].month);
            this.init();
            this.initMonths();
            this.view = 'days';
        };
        NgxDatePickerComponent.prototype.initMonths = function () {
            var _this = this;
            this.months = Array.from(new Array(12), function (x, i) { return dateFns.setMonth(new Date(), i); })
                .map(function (date) {
                return { month: date.getMonth(), name: dateFns.format(date, 'MMM'), isSelected: date.getMonth() === dateFns.getMonth(_this.viewingDate) };
            });
        };
        NgxDatePickerComponent.prototype.nextMonth = function () {
            this.viewingDate = dateFns.addMonths(this.viewingDate, 1);
            this.init();
        };
        NgxDatePickerComponent.prototype.prevMonth = function () {
            this.viewingDate = dateFns.subMonths(this.viewingDate, 1);
            this.init();
        };
        // ############### Year ################
        NgxDatePickerComponent.prototype.initYears = function () {
            var _this = this;
            var range = this.currentOptions.maxYear - this.currentOptions.minYear;
            /* tslint:disable */
            // Ignore the rule due to the uniqeness of the arrow chain.
            this.years = Array.from(new Array(range), function (x, i) { return { index: i, year: i + _this.currentOptions.minYear }; }).map(function (_a) {
                var index = _a.index, year = _a.year;
                return { index: index, year: year, isThisYear: year === dateFns.getYear(_this.viewingDate) };
            });
            /* tslint:enable */
        };
        NgxDatePickerComponent.prototype.scrollYears = function () {
            var _this = this;
            setTimeout(function () {
                var _heightOfYearElement = 40;
                var _yearIndex = _this.years.filter(function (item) { return item.isThisYear; })[0];
                var _scrollPosition = ((_yearIndex.index / 3) * _heightOfYearElement) - 30;
                _this.calendarYearsContainer.nativeElement.scroll(0, _scrollPosition);
            }, 100);
        };
        NgxDatePickerComponent.prototype.setYear = function (i) {
            this.viewingDate = dateFns.setYear(this.viewingDate, this.years[i].year);
            this.init();
            this.initYears();
            this.view = 'months';
        };
        // ############### Container ################
        NgxDatePickerComponent.prototype.toggleView = function () {
            this.view = this.view === 'days' ? 'years' : 'days';
            this.scrollYears();
        };
        NgxDatePickerComponent.prototype.toggle = function () {
            this.isOpened = !this.isOpened;
            if (!this.isOpened && this.view === 'years') {
                this.toggleView();
            }
            if (this.isOpened && this.view === 'days') {
                this.viewingDate = this.range && this.range.start ? this.range.start : this.viewingDate || new Date();
                this.init();
            }
        };
        NgxDatePickerComponent.prototype.reset = function () {
            this.range = {
                start: new Date(),
                end: new Date(),
            };
            this.init();
        };
        // ############### Misc ################
        NgxDatePickerComponent.prototype.onBlur = function (e) {
            if (!this.isOpened || !this.currentOptions.closeOnClickOutside) {
                return;
            }
            if ((e.target.parentElement && e.target.parentElement.classList.contains('day-unit'))) {
                return;
            }
            if (this.calendarContainerElement.nativeElement !== e.target &&
                !this.calendarContainerElement.nativeElement.contains(e.target) &&
                !e.target.classList.contains('year-unit') &&
                !e.target.classList.contains('month-unit')) {
                this.close();
            }
        };
        NgxDatePickerComponent.prototype.close = function () {
            this.isOpened = false;
            if (this.view === 'years') {
                this.toggleView();
            }
        };
        return NgxDatePickerComponent;
    }());
    NgxDatePickerComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'ngx-date-picker',
                    template: "<div *ngIf=\"isOpened\" class=\"ngx-date-picker-calendar-wrapper {{wrapperStyle}}\">\r\n\r\n  <div #container class=\"ngx-date-picker-calendar-container\">\r\n\r\n    <!-- Top Bar -->\r\n    <div class=\"ngx-date-picker-navbar\">\r\n\r\n      <div class=\"ngx-date-picker-navbar-item\" (click)=\"prevMonth()\">\r\n        <i class=\"arrow left\"></i>\r\n      </div>\r\n\r\n      <span class=\"ngx-date-picker-title\" (click)=\"toggleView()\">{{ barTitle }}</span>\r\n\r\n      <div class=\"ngx-date-picker-navbar-item\" (click)=\"nextMonth()\">\r\n        <i class=\"arrow right\"></i>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <div class=\"main-calendar-container\">\r\n\r\n      <!-- Days -->\r\n      <div [ngClass]=\"{ 'show': view === 'days', 'hidden': view !== 'days' }\">\r\n        <div class=\"main-calendar-day-names\">\r\n          <span class=\"day-name-unit\" *ngFor=\"let name of dayNames\">{{ name }}</span>\r\n        </div>\r\n        <div class=\"main-calendar-days\">\r\n          <span class=\"day-unit\" *ngFor=\"let day of days; let i = index;\" (click)=\"day.isSelectable && setDate(i)\">\r\n            <span class=\"day-background-upper\"\r\n              [ngClass]=\"this.getDayClasses(day)\">{{ day.isVisible ? day.day : '' }}</span>\r\n          </span>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Months -->\r\n      <div [ngClass]=\"{ 'show': view === 'months', 'hidden': view !== 'months' }\">\r\n        <div class=\"main-calendar-months\">\r\n          <span *ngFor=\"let month of months; let i = index;\" class=\"month-unit\"\r\n            [ngClass]=\"{ 'is-selected': month.isSelected}\" (click)=\"setMonth(i)\">\r\n            {{ month.name }}\r\n          </span>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Years -->\r\n      <div [ngClass]=\"{ 'show': view === 'years', 'hidden': view !== 'years' }\">\r\n        <div #calendarYearsContainer class=\"main-calendar-years\">\r\n          <span *ngFor=\"let year of years; let i = index;\" class=\"year-unit\"\r\n            [ngClass]=\"{ 'is-selected': year.isThisYear }\" (click)=\"setYear(i)\">\r\n            {{ year.year }}\r\n          </span>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</div>",
                    encapsulation: core.ViewEncapsulation.None,
                    providers: [
                        { provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return NgxDatePickerComponent; }), multi: true }
                    ],
                    styles: [".ngx-date-picker-calendar-container{background:#fff;border:1px solid #dfe3e9;border-radius:4px;box-shadow:0 10px 14px 10px rgba(0,0,0,.08);max-width:100vw;position:absolute;width:300px;z-index:100}@media (max-width:768px){.ngx-date-picker-calendar-wrapper.form-date{background:hsla(0,0%,78.4%,.5);height:100vh;left:0;position:fixed;top:0;width:100vw;z-index:9999}.ngx-date-picker-calendar-wrapper.form-date .ngx-date-picker-calendar-container{left:50%;max-width:100vw;top:50%;transform:translate(-50%,-50%);width:90vw}.ngx-date-picker-calendar-wrapper.form-date .ngx-date-picker-title{font-size:1rem}.ngx-date-picker-calendar-wrapper.form-date .day-unit,.ngx-date-picker-calendar-wrapper.form-date .month-unit,.ngx-date-picker-calendar-wrapper.form-date .year-unit{font-size:1rem;height:2rem}}.ngx-date-picker-navbar{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;align-items:center;border-bottom:1px solid #dfe3e9;display:flex;height:50px;justify-content:space-between;user-select:none}.ngx-date-picker-navbar .ngx-date-picker-navbar-item{cursor:pointer;padding:16px}.ngx-date-picker-navbar .ngx-date-picker-navbar-item .arrow{border:solid #000;border-width:0 3px 3px 0;display:inline-block;padding:3px}.ngx-date-picker-navbar .ngx-date-picker-navbar-item .arrow.right{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}.ngx-date-picker-navbar .ngx-date-picker-navbar-item .arrow.left{-webkit-transform:rotate(135deg);transform:rotate(135deg)}.ngx-date-picker-title{color:#3d495c;cursor:pointer;font-size:14px;font-weight:600}.main-calendar-container{box-sizing:border-box;font-size:12px;font-weight:500;height:100%;padding:15px 10px;width:100%}.main-calendar-container .show{display:block}.main-calendar-container .hidden{display:none}.main-calendar-day-names{align-items:center;box-sizing:border-box;color:#cbcbcb;display:flex;width:100%}.day-name-unit{margin:5px 5px 0 0;text-align:center;text-transform:uppercase;width:14.28571%}.main-calendar-days{overflow:hidden}.main-calendar-days,.main-calendar-years{display:inline-block;padding:15px 0 0;width:100%}.main-calendar-years{overflow-x:hidden;overflow-y:scroll}.main-calendar-years::-webkit-scrollbar-track{-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,.3);background-color:#f5f5f5}.main-calendar-years::-webkit-scrollbar{background-color:#f5f5f5;width:6px}.main-calendar-years::-webkit-scrollbar-thumb{background-color:#000}.day-unit,.month-unit,.year-unit{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;cursor:pointer;float:left;font-size:14px;font-weight:400;height:35px;margin:5px 5px 0 0;position:relative;user-select:none;width:calc(14.28571% - 5px)}.day-background-upper,.day-unit,.month-unit,.year-unit{align-items:center;display:inline-flex;justify-content:center}.day-background-upper{background:#f0f0f0;border-radius:4px;color:#333;height:100%;position:absolute;width:100%;z-index:1}.day-background-upper:not(.is-visible){cursor:default}.day-background-upper:hover{background:rgba(255,0,0,.6);color:#f0f0f0}.day-background-upper.is-prev-month{color:#cbcbcb}.day-background-upper.is-prev-month:hover{background:rgba(255,0,0,.6);color:#f0f0f0}.day-background-upper.is-disabled{color:#cbcbcb;cursor:not-allowed}.day-background-upper.is-in-range{background:rgba(255,0,0,.6);color:#f0f0f0}.day-background-upper.is-selected{background:red;color:#f0f0f0}.main-calendar-years{display:block;height:210px;padding:0}.month-unit{height:54px;width:calc(25% - 5px)}.year-unit{width:calc(33.33333% - 5px)}.month-unit,.year-unit{border-radius:4px}.month-unit.is-selected,.year-unit.is-selected{background:red;color:#f0f0f0}.month-unit:hover,.year-unit:hover{background:rgba(255,0,0,.6);color:#f0f0f0}.main-calendar-months{display:inline-block;padding-bottom:10px}"]
                },] }
    ];
    NgxDatePickerComponent.propDecorators = {
        calendarContainerElement: [{ type: core.ViewChild, args: ['container',] }],
        calendarYearsContainer: [{ type: core.ViewChild, args: ['calendarYearsContainer',] }],
        value: [{ type: core.Input }],
        options: [{ type: core.Input }],
        isOpened: [{ type: core.Input }],
        valueChange: [{ type: core.Output }],
        onBlur: [{ type: core.HostListener, args: ['document:click', ['$event'],] }]
    };

    var NgxDatePickerDirective = /** @class */ (function () {
        function NgxDatePickerDirective(_el) {
            this._el = _el;
            this.valueChange = new core.EventEmitter();
            this.onChange = function (_value) { };
            this.onTouched = function () { };
        }
        NgxDatePickerDirective.prototype.ngOnInit = function () {
            var _this = this;
            if (!this.datePickerInstance) {
                throw new Error('Instance of <ngx-date-picker> is required for directive.');
            }
            this.datePickerInstance.isOpened = false;
            this.datePickerInstance.isInline = false;
            // this.datePickerInstance.currentOptions.closeOnSelection = true;
            this.datePickerInstance.currentOptions.closeOnClickOutside = false;
            this.onChangeSubscription = this.datePickerInstance.valueChange.subscribe(function (value) {
                _this._el.nativeElement.value = _this.datePickerInstance.formatDisplay();
                _this.valueChange.emit(value);
                _this.onChange(value);
            });
        };
        NgxDatePickerDirective.prototype.ngAfterViewInit = function () {
            if (!this.value) {
                return;
            }
            if (this.value instanceof Date) {
                this.datePickerInstance.range = createDateRange(this.value, this.value);
            }
            else {
                this.datePickerInstance.range = this.value;
            }
            this.datePickerInstance.valueChange.emit(this.datePickerInstance.getValueToEmit(this.datePickerInstance.range));
        };
        NgxDatePickerDirective.prototype.ngOnDestroy = function () {
            if (this.onChangeSubscription) {
                this.onChangeSubscription.unsubscribe();
            }
        };
        // ############# ControlValueAccessor #############
        NgxDatePickerDirective.prototype.writeValue = function (value) {
            if (value instanceof Date) {
                this.datePickerInstance.range = createDateRange(value, value);
            }
            else {
                this.datePickerInstance.range = value;
            }
            this.datePickerInstance.valueChange.emit(this.datePickerInstance.getValueToEmit(this.datePickerInstance.range));
        };
        NgxDatePickerDirective.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        NgxDatePickerDirective.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        NgxDatePickerDirective.prototype.setDisabledState = function (isDisabled) {
            this.datePickerInstance.disabled = isDisabled;
        };
        // ############# Click Events #############
        NgxDatePickerDirective.prototype.onClick = function (e) {
            this.datePickerInstance.toggle();
        };
        NgxDatePickerDirective.prototype.onBlur = function (e) {
            if (!this.datePickerInstance.isOpened) {
                return;
            }
            if ((e.target.parentElement && e.target.parentElement.classList.contains('day-unit'))) {
                return;
            }
            if (this._el.nativeElement !== e.target &&
                !this.datePickerInstance.calendarContainerElement.nativeElement.contains(e.target) &&
                !e.target.classList.contains('year-unit') &&
                !e.target.classList.contains('month-unit')) {
                this.datePickerInstance.close();
            }
        };
        return NgxDatePickerDirective;
    }());
    NgxDatePickerDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[ngxDatePicker]',
                    providers: [
                        { provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return NgxDatePickerDirective; }), multi: true }
                    ]
                },] }
    ];
    NgxDatePickerDirective.ctorParameters = function () { return [
        { type: core.ElementRef }
    ]; };
    NgxDatePickerDirective.propDecorators = {
        datePickerInstance: [{ type: core.Input, args: ['ngxDatePicker',] }],
        value: [{ type: core.Input }],
        valueChange: [{ type: core.Output }],
        onClick: [{ type: core.HostListener, args: ['click', ['$event'],] }],
        onBlur: [{ type: core.HostListener, args: ['document:click', ['$event'],] }]
    };

    var NgxDatePickerModule = /** @class */ (function () {
        function NgxDatePickerModule() {
        }
        return NgxDatePickerModule;
    }());
    NgxDatePickerModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [NgxDatePickerComponent, NgxDatePickerDirective],
                    imports: [common.CommonModule, forms.FormsModule],
                    exports: [NgxDatePickerComponent, NgxDatePickerDirective, common.CommonModule, forms.FormsModule]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.NgxDatePickerComponent = NgxDatePickerComponent;
    exports.NgxDatePickerModule = NgxDatePickerModule;
    exports.ɵa = NgxDatePickerDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-tiny-date-picker.umd.js.map
