{"version":3,"sources":["../../../projects/ngx-date-picker/src/helpers/is-same-date.ts","../../../projects/ngx-date-picker/src/helpers/create-date-range.ts","../../../projects/ngx-date-picker/src/helpers/is-null.ts","../../../projects/ngx-date-picker/src/component/date-picker/ngx-date-picker.component.ts","../../../projects/ngx-date-picker/src/ngx-date-picker.directive.ts","../../../projects/ngx-date-picker/src/ngx-date-picker.module.ts"],"names":["isSameDate","date","current","isSameDay","isSameMonth","isSameYear","createDateRange","start","end","Date","getTime","isNull","value","instanceID","NgxDatePickerComponent","_this","this","isOpened","valueChange","EventEmitter","currentOptions","closeOnClickOutside","closeOnSelection","includeDays","includeNextMonthsFirstFullWeek","minYear","maxYear","displayFormat","barTitleFormat","dayNamesFormat","rangeSeparator","selectRange","firstCalendarDay","barTitleIfEmpty","locale","fieldId","defaultFieldId","useEmptyBarTitle","mobileStyle","onTouchedCallback","onChangeCallback","_","emit","formatDay","isVisible","day","getDate","month","getMonth","year","getYear","inThisMonth","viewingDate","isToday","isSelected","isDateSelected","isInRange","isSelectable","isDateSelectable","isStart","isRangeBoundary","isEnd","prototype","setDisabledState","isDisabled","disabled","Object","defineProperty","_range","val","isInline","ngOnInit","startOfMonth","Error","view","range","updateOptions","options","initDayNames","initYears","initMonths","init","ngOnChanges","changes","currentValue","assign","writeValue","registerOnChange","fn","registerOnTouched","getDayClasses","is-prev-month","is-today","is-selected","is-in-range","is-disabled","range-start","range-end","is-visible","minDateSet","minDate","maxDateSet","maxDate","timestamp","valueOf","_isAboveMinDate","_isBelowMaxDate","isAfter","isBefore","formatDisplay","formattedStartDate","format","formattedEndDate","boundary","getValueToEmit","endOfMonth","days","eachDayOfInterval","map","firstMonthDay","getDay","prevDays","nextDays","showPrevMonthDays","showNextMonthDays","i","unshift","subDays","Array","fill","undefined","forEach","push","addDays","displayValue","barTitle","setDate","close","dayNames","setDay","setMonth","months","from","x","name","nextMonth","addMonths","prevMonth","subMonths","years","index","_a","isThisYear","scrollYears","setTimeout","_scrollPosition","filter","item","calendarYearsContainer","nativeElement","scroll","setYear","toggleView","toggle","reset","onBlur","e","target","parentElement","classList","contains","calendarContainerElement","Component","args","selector","template","encapsulation","ViewEncapsulation","None","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","ViewChild","Input","Output","HostListener","NgxDatePickerDirective","_el","onChange","_value","onTouched","datePickerInstance","onChangeSubscription","subscribe","ngAfterViewInit","ngOnDestroy","unsubscribe","onClick","Directive","ElementRef","NgModule","declarations","imports","CommonModule","FormsModule","exports"],"mappings":"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","sourcesContent":["import { isSameDay, isSameMonth, isSameYear } from 'date-fns';\r\n\r\nexport const isSameDate = (date: Date, current: Date): boolean => (\r\n  isSameDay(date, current) && isSameMonth(date, current) && isSameYear(date, current)\r\n);\r\n","import { DateRange } from '../models';\r\n\r\nexport const createDateRange = (start: Date, end: Date): DateRange => ({\r\n  start: start ? new Date(start.getTime()) : null,\r\n  end: end ? new Date(end.getTime()) : null,\r\n});\r\n","/**\r\n * Internal library helper that helps to check if value is empty\r\n */\r\nexport const isNull = (value: any) => {\r\n    return (typeof value === 'undefined') || (value === null);\r\n};\r\n","import {\r\n    Component,\r\n    OnInit,\r\n    Input,\r\n    OnChanges,\r\n    SimpleChanges,\r\n    ElementRef,\r\n    forwardRef,\r\n    ViewChild,\r\n    ViewEncapsulation,\r\n    HostListener,\r\n    Output,\r\n    EventEmitter\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\r\n\r\n\r\nimport {\r\n    startOfMonth,\r\n    endOfMonth,\r\n    addMonths,\r\n    subMonths,\r\n    setYear,\r\n    eachDayOfInterval,\r\n    getDate,\r\n    getMonth,\r\n    getYear,\r\n    isToday,\r\n    isSameMonth,\r\n    format,\r\n    getDay,\r\n    subDays,\r\n    setDay,\r\n    isAfter, isBefore, addDays, setMonth,\r\n} from 'date-fns';\r\n\r\nimport { isSameDate, createDateRange, isNull } from '../../helpers';\r\nimport { DateRange, Day } from '../../models';\r\nimport { DatePickerOptions, AddClass } from '../../ngx-date-picker.options';\r\n\r\n\r\n// instanceID for calculating the auto-incrementing field ID\r\nlet instanceID = 0;\r\n\r\n@Component({\r\n    selector: 'ngx-date-picker',\r\n    templateUrl: 'ngx-date-picker.component.html',\r\n    styleUrls: ['ngx-date-picker.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    providers: [\r\n        { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => NgxDatePickerComponent), multi: true }\r\n    ]\r\n})\r\nexport class NgxDatePickerComponent implements ControlValueAccessor, OnInit, OnChanges {\r\n\r\n    @ViewChild('container') calendarContainerElement: ElementRef;\r\n    @ViewChild('calendarYearsContainer') calendarYearsContainer: ElementRef;\r\n\r\n\r\n    @Input() value: Date | DateRange;\r\n    @Input() options: DatePickerOptions;\r\n\r\n    /**\r\n     * Set date picker's visibility state\r\n     */\r\n    @Input() isOpened = true;\r\n\r\n    @Output() valueChange: EventEmitter<Date | DateRange> = new EventEmitter();\r\n\r\n    currentOptions: DatePickerOptions = {\r\n        closeOnClickOutside: false,\r\n        closeOnSelection: true,\r\n        includeDays: 'all',\r\n        includeNextMonthsFirstFullWeek: false,\r\n        minYear: 1900,\r\n        maxYear: 2050,\r\n        displayFormat: 'MMM d, yyyy',\r\n        barTitleFormat: 'MMM yyyy',\r\n        dayNamesFormat: 'EEEEEE',\r\n        rangeSeparator: '-',\r\n        selectRange: false,\r\n        firstCalendarDay: 0,\r\n        barTitleIfEmpty: 'Click to select a date',\r\n        locale: {},\r\n        fieldId: this.defaultFieldId,\r\n        useEmptyBarTitle: true,\r\n        mobileStyle: 'dialog'\r\n    };\r\n\r\n    isInline: boolean;\r\n    displayValue: string;\r\n    viewingDate: Date;\r\n    barTitle: string;\r\n    view: 'days' | 'months' | 'years';\r\n    years: { index: number, year: number; isThisYear: boolean }[];\r\n    months: { month: number; name: string; isSelected: boolean }[];\r\n    dayNames: string[];\r\n    days: Day[];\r\n    fieldId: string;\r\n    disabled: boolean;\r\n\r\n    private _range: DateRange;\r\n\r\n    private onTouchedCallback: () => void = () => { };\r\n    private onChangeCallback: (_: Date | DateRange) => void = (_) => {\r\n        this.valueChange.emit(_);\r\n    }\r\n\r\n    public setDisabledState(isDisabled: boolean) {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    set range(val: DateRange | undefined) {\r\n        this._range = val;\r\n    }\r\n\r\n    get range(): DateRange | undefined {\r\n        return this._range;\r\n    }\r\n\r\n    get wrapperStyle() {\r\n        switch (this.currentOptions.mobileStyle) {\r\n            case 'dialog':\r\n                return this.isInline === false ? 'form-date' : 'inline-date';\r\n            case 'normal':\r\n            default:\r\n                return '';\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n\r\n        if (typeof startOfMonth === 'undefined') {\r\n            throw new Error('module date-fns is required by <ngx-date-picker> to function.');\r\n        }\r\n\r\n        this.view = 'days';\r\n        this.range = this.range || {\r\n            start: new Date(),\r\n            end: new Date(),\r\n        };\r\n\r\n        if (this.value && !(this.value instanceof Date)) {\r\n            this.range = this.value;\r\n            this.viewingDate = this.range.start;\r\n        } else if (this.value && this.value instanceof Date) {\r\n            this.viewingDate = this.value;\r\n        } else {\r\n            this.viewingDate = this.range.start;\r\n        }\r\n\r\n        this.updateOptions(this.options);\r\n        this.initDayNames();\r\n        this.initYears();\r\n        this.initMonths();\r\n\r\n        this.init();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if ('options' in changes) {\r\n            this.updateOptions(changes.options.currentValue);\r\n            this.initDayNames();\r\n            this.init();\r\n            this.initYears();\r\n            this.initMonths();\r\n        }\r\n    }\r\n\r\n    get defaultFieldId(): string {\r\n        // Only evaluate and increment if required\r\n        const value = `ngx-date-picker-${instanceID++}`;\r\n        Object.defineProperty(this, 'defaultFieldId', { value });\r\n\r\n        return value;\r\n    }\r\n\r\n    updateOptions(options: DatePickerOptions): void {\r\n        this.currentOptions = {\r\n            ...this.currentOptions,\r\n            ...options,\r\n        };\r\n    }\r\n\r\n    writeValue(val: DateRange | Date | string | undefined) {\r\n        if (val) {\r\n            if (typeof val === 'string') {\r\n                this.range.start = this.range.end = new Date(val);\r\n            } else if (val instanceof Date) {\r\n                this.range.start = this.range.end = val;\r\n            } else if (val.start) { // Checking if it's instance of DateRange\r\n                this.range = val;\r\n            } else {\r\n                throw Error('Invalid input data type');\r\n            }\r\n\r\n            this.viewingDate = this.range.start || this.viewingDate || new Date();\r\n\r\n            this.init();\r\n        }\r\n    }\r\n\r\n    registerOnChange(fn: any) {\r\n        this.onChangeCallback = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: any) {\r\n        this.onTouchedCallback = fn;\r\n    }\r\n\r\n    formatDay = (date: Date, isVisible: boolean = true): Day => (\r\n        {\r\n            date,\r\n            day: getDate(date),\r\n            month: getMonth(date),\r\n            year: getYear(date),\r\n            inThisMonth: isSameMonth(date, this.viewingDate),\r\n            isToday: isVisible && isToday(date),\r\n            isSelected: isVisible && this.isDateSelected(date),\r\n            isInRange: isVisible && this.isInRange(date),\r\n            isSelectable: isVisible && this.isDateSelectable(date),\r\n            isStart: isVisible && this.isRangeBoundary(date, 'start'),\r\n            isEnd: isVisible && this.isRangeBoundary(date, 'end'),\r\n            isVisible,\r\n        }\r\n    )\r\n\r\n    getDayClasses(day: Day): AddClass {\r\n        return {\r\n            'is-prev-month': !day.inThisMonth,\r\n            'is-today': day.isToday,\r\n            'is-selected': day.isSelected,\r\n            'is-in-range': day.isInRange,\r\n            'is-disabled': !day.isSelectable,\r\n            'range-start': day.isStart,\r\n            'range-end': day.isEnd,\r\n            'is-visible': day.isVisible,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Checks if specified date is in range of min and max dates\r\n     */\r\n    private isDateSelectable(date: Date): boolean {\r\n        const minDateSet = !isNull(this.currentOptions.minDate);\r\n        const maxDateSet = !isNull(this.currentOptions.maxDate);\r\n        const timestamp = date.valueOf();\r\n\r\n        // Check if the date range is set and between min and max\r\n        const _isAboveMinDate = minDateSet ? timestamp >= this.currentOptions.minDate.valueOf() : true;\r\n        const _isBelowMaxDate = maxDateSet ? timestamp <= this.currentOptions.maxDate.valueOf() : true;\r\n\r\n        return _isAboveMinDate && _isBelowMaxDate;\r\n    }\r\n\r\n    private isDateSelected(date: Date): boolean {\r\n        return this.range && this.range.start ? isSameDate(date, this.range.start) || isSameDate(date, this.range.end) : false;\r\n    }\r\n\r\n    private isInRange(date: Date): boolean {\r\n        return this.isDateSelected(date) || this.range && this.range.start ? (isAfter(date, this.range.start) && isBefore(date, this.range.end)) : false;\r\n    }\r\n\r\n    public formatDisplay(): string {\r\n        if (!this.range) {\r\n            return '';\r\n        }\r\n\r\n        const formattedStartDate = format(this.range.start, this.currentOptions.displayFormat, this.currentOptions.locale);\r\n\r\n        if (this.currentOptions.selectRange) {\r\n            const formattedEndDate = format(\r\n                this.range.end || this.range.start,\r\n                this.currentOptions.displayFormat,\r\n                this.currentOptions.locale\r\n            );\r\n\r\n            return `${formattedStartDate} ${this.currentOptions.rangeSeparator} ${formattedEndDate}`;\r\n        }\r\n\r\n        return formattedStartDate;\r\n    }\r\n\r\n    private isRangeBoundary(date: Date, boundary: 'start' | 'end'): boolean {\r\n        return this.range ? !this.range[boundary] || isSameDate(date, this.range[boundary]) : false;\r\n    }\r\n\r\n    public getValueToEmit(range: DateRange): DateRange | Date {\r\n\r\n        if (!range || !range.start) {\r\n            return null;\r\n        }\r\n\r\n        if (!this.currentOptions.selectRange) {\r\n            return new Date(range.start.getTime());\r\n        }\r\n\r\n        if (range.end) {\r\n            return createDateRange(range.start, range.end);\r\n        }\r\n\r\n        return createDateRange(range.start, range.start);\r\n    }\r\n\r\n    // ############### Day #################\r\n\r\n    init(): void {\r\n        if (!this.viewingDate) {\r\n            return;\r\n        }\r\n\r\n        const start = startOfMonth(this.viewingDate);\r\n        const end = endOfMonth(this.viewingDate);\r\n\r\n        this.days = eachDayOfInterval({ start, end }).map((date) => this.formatDay(date));\r\n\r\n        const firstMonthDay = getDay(start) - this.currentOptions.firstCalendarDay;\r\n        const prevDays = firstMonthDay < 0 ? 7 - this.currentOptions.firstCalendarDay : firstMonthDay;\r\n        let nextDays = (this.currentOptions.firstCalendarDay === 1 ? 7 : 6) - getDay(end);\r\n\r\n        const showPrevMonthDays = this.currentOptions.includeDays === 'all' || this.currentOptions.includeDays === 'previous-month';\r\n        const showNextMonthDays = this.currentOptions.includeDays === 'all' || this.currentOptions.includeDays === 'next-month';\r\n\r\n        if (showNextMonthDays && this.currentOptions.includeNextMonthsFirstFullWeek) {\r\n            nextDays += 7;\r\n        }\r\n\r\n        for (let i = 1; i <= prevDays; i++) {\r\n            this.days.unshift(this.formatDay(subDays(start, i), showPrevMonthDays));\r\n        }\r\n\r\n        new Array(nextDays).fill(undefined)\r\n            .forEach((_, i) => this.days.push(this.formatDay(addDays(end, i + 1), showNextMonthDays)));\r\n\r\n\r\n        this.displayValue = this.formatDisplay();\r\n\r\n        if (this.range) {\r\n            this.barTitle = format(this.viewingDate, this.currentOptions.barTitleFormat, this.currentOptions.locale);\r\n        } else {\r\n            this.barTitle = this.currentOptions.useEmptyBarTitle ?\r\n                this.currentOptions.barTitleIfEmpty :\r\n                format(this.viewingDate, this.currentOptions.barTitleFormat, this.currentOptions.locale);\r\n        }\r\n    }\r\n\r\n    setDate(i: number): void {\r\n        const date = this.days[i].date;\r\n\r\n        const _range: any = this.range || {};\r\n\r\n        if (this.currentOptions.selectRange) {\r\n            if (!this.range || (!this.range.start && !this.range.end)) {\r\n                _range.start = date;\r\n            } else if (this.range.start && !this.range.end && isAfter(date, this.range.start)) {\r\n                _range.end = date;\r\n            } else {\r\n                _range.end = undefined;\r\n                _range.start = date;\r\n            }\r\n        } else {\r\n            _range.start = _range.end = date;\r\n        }\r\n\r\n        this.range = _range;\r\n\r\n        this.init();\r\n        this.onChangeCallback(this.getValueToEmit(this.range));\r\n\r\n        // Close if last value is selected\r\n        if (this.currentOptions.closeOnSelection && this.range.end) {\r\n            this.close();\r\n        }\r\n    }\r\n\r\n    initDayNames(): void {\r\n        this.dayNames = [];\r\n        const start = this.currentOptions.firstCalendarDay;\r\n\r\n        for (let i = start; i <= 6 + start; i++) {\r\n            const date = setDay(new Date(), i);\r\n\r\n            this.dayNames.push(format(date, this.currentOptions.dayNamesFormat, this.currentOptions.locale));\r\n        }\r\n    }\r\n\r\n    // ############### Month ###############\r\n\r\n    setMonth(i: number): void {\r\n        this.viewingDate = setMonth(this.viewingDate, this.months[i].month);\r\n        this.init();\r\n        this.initMonths();\r\n        this.view = 'days';\r\n    }\r\n\r\n    initMonths(): void {\r\n        this.months = Array.from(new Array(12), (x, i) => setMonth(new Date(), i))\r\n            .map((date) => {\r\n                return { month: date.getMonth(), name: format(date, 'MMM'), isSelected: date.getMonth() === getMonth(this.viewingDate) };\r\n            });\r\n    }\r\n\r\n    nextMonth(): void {\r\n        this.viewingDate = addMonths(this.viewingDate, 1);\r\n        this.init();\r\n    }\r\n\r\n    prevMonth(): void {\r\n        this.viewingDate = subMonths(this.viewingDate, 1);\r\n        this.init();\r\n    }\r\n\r\n    // ############### Year ################\r\n\r\n\r\n    initYears(): void {\r\n        const range = this.currentOptions.maxYear - this.currentOptions.minYear;\r\n\r\n        /* tslint:disable */\r\n        // Ignore the rule due to the uniqeness of the arrow chain.\r\n        this.years = Array.from(new Array(range), (x, i) => { return { index: i, year: i + this.currentOptions.minYear }; }).map(({ index, year }) => {\r\n            return { index: index, year: year, isThisYear: year === getYear(this.viewingDate) };\r\n        });\r\n        /* tslint:enable */\r\n    }\r\n\r\n    scrollYears(): void {\r\n        setTimeout(() => {\r\n            const _heightOfYearElement = 40;\r\n            const _yearIndex = this.years.filter(item => item.isThisYear)[0];\r\n            const _scrollPosition = ((_yearIndex.index / 3) * _heightOfYearElement) - 30;\r\n            this.calendarYearsContainer.nativeElement.scroll(0, _scrollPosition);\r\n        }, 100);\r\n    }\r\n\r\n    setYear(i: number): void {\r\n        this.viewingDate = setYear(this.viewingDate, this.years[i].year);\r\n        this.init();\r\n        this.initYears();\r\n        this.view = 'months';\r\n    }\r\n\r\n    // ############### Container ################\r\n\r\n    toggleView(): void {\r\n        this.view = this.view === 'days' ? 'years' : 'days';\r\n        this.scrollYears();\r\n    }\r\n\r\n    toggle(): void {\r\n        this.isOpened = !this.isOpened;\r\n\r\n        if (!this.isOpened && this.view === 'years') {\r\n            this.toggleView();\r\n        }\r\n\r\n        if (this.isOpened && this.view === 'days') {\r\n            this.viewingDate = this.range && this.range.start ? this.range.start : this.viewingDate || new Date();\r\n            this.init();\r\n        }\r\n    }\r\n\r\n    reset(): void {\r\n        this.range = {\r\n            start: new Date(),\r\n            end: new Date(),\r\n        };\r\n        this.init();\r\n    }\r\n\r\n    // ############### Misc ################\r\n\r\n    @HostListener('document:click', ['$event']) onBlur(e: MouseEvent) {\r\n\r\n        if (!this.isOpened || !this.currentOptions.closeOnClickOutside) {\r\n            return;\r\n        }\r\n\r\n        if (((e.target as any).parentElement && (e.target as any).parentElement.classList.contains('day-unit'))) {\r\n            return;\r\n        }\r\n\r\n        if (this.calendarContainerElement.nativeElement !== e.target &&\r\n            !this.calendarContainerElement.nativeElement.contains(e.target as any) &&\r\n            !(e.target as any).classList.contains('year-unit') &&\r\n            !(e.target as any).classList.contains('month-unit')\r\n        ) {\r\n            this.close();\r\n        }\r\n    }\r\n\r\n    close(): void {\r\n        this.isOpened = false;\r\n\r\n        if (this.view === 'years') {\r\n            this.toggleView();\r\n        }\r\n    }\r\n}\r\n","import { Directive, OnInit, Input, ElementRef, HostListener, OnDestroy, Output, EventEmitter, AfterViewInit, forwardRef } from '@angular/core';\r\nimport { NgxDatePickerComponent } from './component/date-picker/ngx-date-picker.component';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { DateRange } from './models';\r\nimport { createDateRange } from './helpers';\r\n\r\n\r\n@Directive({\r\n    selector: '[ngxDatePicker]',\r\n    providers: [\r\n        { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => NgxDatePickerDirective), multi: true }\r\n    ]\r\n})\r\nexport class NgxDatePickerDirective implements OnInit, AfterViewInit, OnDestroy, ControlValueAccessor {\r\n\r\n    onChangeSubscription: Subscription;\r\n\r\n    @Input('ngxDatePicker') private datePickerInstance: NgxDatePickerComponent;\r\n\r\n    @Input() value: Date | DateRange;\r\n    @Output() valueChange: EventEmitter<Date | DateRange> = new EventEmitter();\r\n\r\n    onChange = (_value: Date | DateRange) => { };\r\n    onTouched = () => { };\r\n\r\n    constructor(public _el: ElementRef) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n\r\n        if (!this.datePickerInstance) {\r\n            throw new Error('Instance of <ngx-date-picker> is required for directive.');\r\n        }\r\n\r\n        this.datePickerInstance.isOpened = false;\r\n        this.datePickerInstance.isInline = false;\r\n        // this.datePickerInstance.currentOptions.closeOnSelection = true;\r\n        this.datePickerInstance.currentOptions.closeOnClickOutside = false;\r\n\r\n        this.onChangeSubscription = this.datePickerInstance.valueChange.subscribe((value: Date | DateRange) => {\r\n            this._el.nativeElement.value = this.datePickerInstance.formatDisplay();\r\n            this.valueChange.emit(value);\r\n            this.onChange(value);\r\n        });\r\n\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n\r\n        if (!this.value) {\r\n            return;\r\n        }\r\n\r\n        if (this.value instanceof Date) {\r\n            this.datePickerInstance.range = createDateRange(this.value, this.value);\r\n        } else {\r\n            this.datePickerInstance.range = this.value;\r\n        }\r\n\r\n        this.datePickerInstance.valueChange.emit(this.datePickerInstance.getValueToEmit(this.datePickerInstance.range));\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.onChangeSubscription) {\r\n            this.onChangeSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n\r\n    // ############# ControlValueAccessor #############\r\n\r\n    writeValue(value: Date | DateRange): void {\r\n\r\n        if (value instanceof Date) {\r\n            this.datePickerInstance.range = createDateRange(value, value);\r\n        } else {\r\n            this.datePickerInstance.range = value;\r\n        }\r\n\r\n        this.datePickerInstance.valueChange.emit(this.datePickerInstance.getValueToEmit(this.datePickerInstance.range));\r\n    }\r\n\r\n    registerOnChange(fn: any): void {\r\n        this.onChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: any): void {\r\n        this.onTouched = fn;\r\n    }\r\n\r\n    setDisabledState?(isDisabled: boolean): void {\r\n        this.datePickerInstance.disabled = isDisabled;\r\n    }\r\n\r\n    // ############# Click Events #############\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(e: MouseEvent) {\r\n        this.datePickerInstance.toggle();\r\n    }\r\n\r\n    @HostListener('document:click', ['$event'])\r\n    onBlur(e: MouseEvent) {\r\n\r\n        if (!this.datePickerInstance.isOpened) {\r\n            return;\r\n        }\r\n\r\n        if (((e.target as any).parentElement && (e.target as any).parentElement.classList.contains('day-unit'))) {\r\n            return;\r\n        }\r\n\r\n        if (this._el.nativeElement !== e.target &&\r\n            !this.datePickerInstance.calendarContainerElement.nativeElement.contains(e.target as any) &&\r\n            !(e.target as any).classList.contains('year-unit') &&\r\n            !(e.target as any).classList.contains('month-unit')\r\n        ) {\r\n            this.datePickerInstance.close();\r\n        }\r\n    }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgxDatePickerComponent } from './component/date-picker/ngx-date-picker.component';\r\nimport { NgxDatePickerDirective } from './ngx-date-picker.directive';\r\n\r\n@NgModule({\r\n  declarations: [ NgxDatePickerComponent, NgxDatePickerDirective ],\r\n  imports: [ CommonModule, FormsModule ],\r\n  exports: [ NgxDatePickerComponent, NgxDatePickerDirective, CommonModule, FormsModule ]\r\n})\r\nexport class NgxDatePickerModule { }\r\n"]}