import { Directive, Input, ElementRef, HostListener, Output, EventEmitter, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { createDateRange } from './helpers';
export class NgxDatePickerDirective {
    constructor(_el) {
        this._el = _el;
        this.valueChange = new EventEmitter();
        this.onChange = (_value) => { };
        this.onTouched = () => { };
    }
    ngOnInit() {
        if (!this.datePickerInstance) {
            throw new Error('Instance of <ngx-date-picker> is required for directive.');
        }
        this.datePickerInstance.isOpened = false;
        this.datePickerInstance.isInline = false;
        // this.datePickerInstance.currentOptions.closeOnSelection = true;
        this.datePickerInstance.currentOptions.closeOnClickOutside = false;
        this.onChangeSubscription = this.datePickerInstance.valueChange.subscribe((value) => {
            this._el.nativeElement.value = this.datePickerInstance.formatDisplay();
            this.valueChange.emit(value);
            this.onChange(value);
        });
    }
    ngAfterViewInit() {
        if (!this.value) {
            return;
        }
        if (this.value instanceof Date) {
            this.datePickerInstance.range = createDateRange(this.value, this.value);
        }
        else {
            this.datePickerInstance.range = this.value;
        }
        this.datePickerInstance.valueChange.emit(this.datePickerInstance.getValueToEmit(this.datePickerInstance.range));
    }
    ngOnDestroy() {
        if (this.onChangeSubscription) {
            this.onChangeSubscription.unsubscribe();
        }
    }
    // ############# ControlValueAccessor #############
    writeValue(value) {
        if (value instanceof Date) {
            this.datePickerInstance.range = createDateRange(value, value);
        }
        else {
            this.datePickerInstance.range = value;
        }
        this.datePickerInstance.valueChange.emit(this.datePickerInstance.getValueToEmit(this.datePickerInstance.range));
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.datePickerInstance.disabled = isDisabled;
    }
    // ############# Click Events #############
    onClick(e) {
        this.datePickerInstance.toggle();
    }
    onBlur(e) {
        if (!this.datePickerInstance.isOpened) {
            return;
        }
        if ((e.target.parentElement && e.target.parentElement.classList.contains('day-unit'))) {
            return;
        }
        if (this._el.nativeElement !== e.target &&
            !this.datePickerInstance.calendarContainerElement.nativeElement.contains(e.target) &&
            !e.target.classList.contains('year-unit') &&
            !e.target.classList.contains('month-unit')) {
            this.datePickerInstance.close();
        }
    }
}
NgxDatePickerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngxDatePicker]',
                providers: [
                    { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => NgxDatePickerDirective), multi: true }
                ]
            },] }
];
NgxDatePickerDirective.ctorParameters = () => [
    { type: ElementRef }
];
NgxDatePickerDirective.propDecorators = {
    datePickerInstance: [{ type: Input, args: ['ngxDatePicker',] }],
    value: [{ type: Input }],
    valueChange: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }],
    onBlur: [{ type: HostListener, args: ['document:click', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,