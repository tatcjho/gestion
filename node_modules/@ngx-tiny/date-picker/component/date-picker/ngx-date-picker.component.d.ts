import { OnInit, OnChanges, SimpleChanges, ElementRef, EventEmitter } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { DateRange, Day } from '../../models';
import { DatePickerOptions, AddClass } from '../../ngx-date-picker.options';
export declare class NgxDatePickerComponent implements ControlValueAccessor, OnInit, OnChanges {
    calendarContainerElement: ElementRef;
    calendarYearsContainer: ElementRef;
    value: Date | DateRange;
    options: DatePickerOptions;
    /**
     * Set date picker's visibility state
     */
    isOpened: boolean;
    valueChange: EventEmitter<Date | DateRange>;
    currentOptions: DatePickerOptions;
    isInline: boolean;
    displayValue: string;
    viewingDate: Date;
    barTitle: string;
    view: 'days' | 'months' | 'years';
    years: {
        index: number;
        year: number;
        isThisYear: boolean;
    }[];
    months: {
        month: number;
        name: string;
        isSelected: boolean;
    }[];
    dayNames: string[];
    days: Day[];
    fieldId: string;
    disabled: boolean;
    private _range;
    private onTouchedCallback;
    private onChangeCallback;
    setDisabledState(isDisabled: boolean): void;
    set range(val: DateRange | undefined);
    get range(): DateRange | undefined;
    get wrapperStyle(): "" | "form-date" | "inline-date";
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    get defaultFieldId(): string;
    updateOptions(options: DatePickerOptions): void;
    writeValue(val: DateRange | Date | string | undefined): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    formatDay: (date: Date, isVisible?: boolean) => Day;
    getDayClasses(day: Day): AddClass;
    /**
     * Checks if specified date is in range of min and max dates
     */
    private isDateSelectable;
    private isDateSelected;
    private isInRange;
    formatDisplay(): string;
    private isRangeBoundary;
    getValueToEmit(range: DateRange): DateRange | Date;
    init(): void;
    setDate(i: number): void;
    initDayNames(): void;
    setMonth(i: number): void;
    initMonths(): void;
    nextMonth(): void;
    prevMonth(): void;
    initYears(): void;
    scrollYears(): void;
    setYear(i: number): void;
    toggleView(): void;
    toggle(): void;
    reset(): void;
    onBlur(e: MouseEvent): void;
    close(): void;
}
